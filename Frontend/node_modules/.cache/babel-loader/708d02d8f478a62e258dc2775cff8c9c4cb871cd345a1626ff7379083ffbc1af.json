{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      menuItems: [],\n      placeholderImage: 'https://via.placeholder.com/150'\n    };\n  },\n  computed: {\n    cartItemCount() {\n      return JSON.parse(localStorage.getItem('cart') || '[]').length;\n    }\n  },\n  mounted() {\n    this.fetchMenuItems();\n  },\n  methods: {\n    async fetchMenuItems() {\n      try {\n        const response = await fetch('http://localhost:3000/api/menu-items');\n        if (response.ok) {\n          this.menuItems = await response.json();\n        } else {\n          throw new Error('Error fetching menu items');\n        }\n      } catch (error) {\n        console.error('Error fetching menu items:', error);\n      }\n    },\n    addToCart(item) {\n      const cart = JSON.parse(localStorage.getItem('cart') || '[]');\n      const existingItem = cart.find(cartItem => cartItem.menuItem._id === item._id);\n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cart.push({\n          menuItem: item,\n          quantity: 1\n        });\n      }\n      localStorage.setItem('cart', JSON.stringify(cart));\n      alert('Item added to cart!');\n    }\n  }\n};","map":{"version":3,"names":["data","menuItems","placeholderImage","computed","cartItemCount","JSON","parse","localStorage","getItem","length","mounted","fetchMenuItems","methods","response","fetch","ok","json","Error","error","console","addToCart","item","cart","existingItem","find","cartItem","menuItem","_id","quantity","push","setItem","stringify","alert"],"sources":["/Users/thinhdang/Desktop/Relaxing-koala/Frontend/src/views/MenuView.vue"],"sourcesContent":["<template>\n    <div class=\"menu-container\">\n      <h1>Our Menu</h1>\n      <div class=\"menu-items\">\n        <div v-for=\"item in menuItems\" :key=\"item._id\" class=\"menu-item\">\n          <img :src=\"placeholderImage\" alt=\"Menu Item\" class=\"menu-item-image\" />\n          <div class=\"menu-item-details\">\n            <h3>{{ item.name }}</h3>\n            <p>{{ item.description }}</p>\n            <p class=\"menu-item-price\">${{ item.price.toFixed(2) }}</p>\n            <button @click=\"addToCart(item)\">Add to Cart</button>\n          </div>\n        </div>\n      </div>\n      <router-link to=\"/cart\" class=\"cart-icon\">\n        <i class=\"bi bi-cart-fill\"></i>\n        <span class=\"cart-count\">{{ cartItemCount }}</span>\n      </router-link>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        menuItems: [],\n        placeholderImage: 'https://via.placeholder.com/150',\n      };\n    },\n    computed: {\n      cartItemCount() {\n        return JSON.parse(localStorage.getItem('cart') || '[]').length;\n      },\n    },\n    mounted() {\n      this.fetchMenuItems();\n    },\n    methods: {\n      async fetchMenuItems() {\n        try {\n          const response = await fetch('http://localhost:3000/api/menu-items');\n          if (response.ok) {\n            this.menuItems = await response.json();\n          } else {\n            throw new Error('Error fetching menu items');\n          }\n        } catch (error) {\n          console.error('Error fetching menu items:', error);\n        }\n      },\n      addToCart(item) {\n        const cart = JSON.parse(localStorage.getItem('cart') || '[]');\n        const existingItem = cart.find((cartItem) => cartItem.menuItem._id === item._id);\n        if (existingItem) {\n          existingItem.quantity++;\n        } else {\n          cart.push({ menuItem: item, quantity: 1 });\n        }\n        localStorage.setItem('cart', JSON.stringify(cart));\n        alert('Item added to cart!');\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .menu-container {\n    max-width: 900px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n  .menu-items {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    grid-gap: 20px;\n  }\n  .menu-item {\n    border: 1px solid #ccc;\n    padding: 10px;\n    text-align: center;\n  }\n  .menu-item-image {\n    width: 100%;\n    height: auto;\n    margin-bottom: 10px;\n  }\n  .menu-item-details {\n    margin-top: 10px;\n  }\n  .menu-item-price {\n    font-weight: bold;\n    color: #888;\n  }\n  .cart-icon {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    font-size: 24px;\n    color: #333;\n    text-decoration: none;\n  }\n  .cart-count {\n    background-color: red;\n    color: white;\n    border-radius: 50%;\n    padding: 4px 8px;\n    font-size: 12px;\n    position: absolute;\n    top: -10px;\n    right: -10px;\n  }\n  </style>\n  "],"mappings":";AAsBE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,CAACC,MAAM;IAChE;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,sCAAsC,CAAC;QACpE,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,IAAI,CAACd,SAAQ,GAAI,MAAMY,QAAQ,CAACG,IAAI,CAAC,CAAC;QACxC,OAAO;UACL,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACDE,SAASA,CAACC,IAAI,EAAE;MACd,MAAMC,IAAG,GAAIjB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC;MAC7D,MAAMe,YAAW,GAAID,IAAI,CAACE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,QAAQ,CAACC,GAAE,KAAMN,IAAI,CAACM,GAAG,CAAC;MAChF,IAAIJ,YAAY,EAAE;QAChBA,YAAY,CAACK,QAAQ,EAAE;MACzB,OAAO;QACLN,IAAI,CAACO,IAAI,CAAC;UAAEH,QAAQ,EAAEL,IAAI;UAAEO,QAAQ,EAAE;QAAE,CAAC,CAAC;MAC5C;MACArB,YAAY,CAACuB,OAAO,CAAC,MAAM,EAAEzB,IAAI,CAAC0B,SAAS,CAACT,IAAI,CAAC,CAAC;MAClDU,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}