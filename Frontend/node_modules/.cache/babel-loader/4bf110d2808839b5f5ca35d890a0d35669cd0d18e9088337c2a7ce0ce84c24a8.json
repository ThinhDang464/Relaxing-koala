{"ast":null,"code":"export default {\n  data() {\n    return {\n      reservation: {\n        date: '',\n        time: '',\n        numberOfPeople: '',\n        specialComments: ''\n      },\n      updatedReservation: {\n        date: '',\n        time: '',\n        numberOfPeople: '',\n        specialComments: ''\n      },\n      user: {\n        firstName: '',\n        lastName: '',\n        email: ''\n      },\n      editMode: false\n    };\n  },\n  methods: {\n    async submitReservation() {\n      // Existing reservation submission logic\n    },\n    async fetchReservation() {\n      try {\n        const response = await fetch(`http://localhost:3000/api/reservations?firstName=${this.user.firstName}&lastName=${this.user.lastName}&email=${this.user.email}`);\n        if (response.ok) {\n          const data = await response.json();\n          if (data.length > 0) {\n            this.reservation = data[0];\n            this.updatedReservation = {\n              ...this.reservation\n            };\n          } else {\n            alert('No reservation found for the provided user details.');\n          }\n        } else {\n          throw new Error('Error fetching reservation');\n        }\n      } catch (error) {\n        console.error('Error fetching reservation:', error);\n      }\n    },\n    async updateReservation() {\n      try {\n        const response = await fetch(`http://localhost:3000/api/reservations/${this.reservation._id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.updatedReservation)\n        });\n        if (response.ok) {\n          alert('Reservation updated successfully!');\n          this.reservation = {\n            ...this.updatedReservation\n          };\n        } else {\n          throw new Error('Error updating reservation');\n        }\n      } catch (error) {\n        console.error('Error updating reservation:', error);\n      }\n    },\n    async deleteReservation() {\n      try {\n        const response = await fetch(`http://localhost:3000/api/reservations/${this.reservation._id}`, {\n          method: 'DELETE'\n        });\n        if (response.ok) {\n          alert('Reservation deleted successfully!');\n          this.reservation = null;\n          this.updatedReservation = {\n            date: '',\n            time: '',\n            numberOfPeople: '',\n            specialComments: ''\n          };\n        } else {\n          throw new Error('Error deleting reservation');\n        }\n      } catch (error) {\n        console.error('Error deleting reservation:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","reservation","date","time","numberOfPeople","specialComments","updatedReservation","user","firstName","lastName","email","editMode","methods","submitReservation","fetchReservation","response","fetch","ok","json","length","alert","Error","error","console","updateReservation","_id","method","headers","body","JSON","stringify","deleteReservation"],"sources":["/Users/thinhdang/Desktop/Relaxing-koala/Frontend/src/views/ReservationView.vue"],"sourcesContent":["<template>\n    <div class=\"reservation-form\">\n      <h2>Book a Reservation</h2>\n      <form v-if=\"!editMode\" @submit.prevent=\"submitReservation\">\n        <!-- Reservation form fields -->\n      </form>\n      <div v-else>\n        <h3>Edit Reservation</h3>\n        <div>\n          <label for=\"firstName\">First Name:</label>\n          <input type=\"text\" id=\"firstName\" v-model=\"user.firstName\" required>\n        </div>\n        <div>\n          <label for=\"lastName\">Last Name:</label>\n          <input type=\"text\" id=\"lastName\" v-model=\"user.lastName\" required>\n        </div>\n        <div>\n          <label for=\"email\">Email:</label>\n          <input type=\"email\" id=\"email\" v-model=\"user.email\" required>\n        </div>\n        <button @click=\"fetchReservation\">Search</button>\n      </div>\n      <div v-if=\"reservation\">\n        <h4>Existing Reservation</h4>\n        <p>Date: {{ reservation.date }}</p>\n        <p>Time: {{ reservation.time }}</p>\n        <p>Number of People: {{ reservation.numberOfPeople }}</p>\n        <p>Special Comments: {{ reservation.specialComments }}</p>\n        <div>\n          <label for=\"newDate\">New Date:</label>\n          <input type=\"date\" id=\"newDate\" v-model=\"updatedReservation.date\">\n        </div>\n        <div>\n          <label for=\"newTime\">New Time:</label>\n          <input type=\"time\" id=\"newTime\" v-model=\"updatedReservation.time\">\n        </div>\n        <div>\n          <label for=\"newNumberOfPeople\">New Number of People:</label>\n          <input type=\"number\" id=\"newNumberOfPeople\" v-model=\"updatedReservation.numberOfPeople\">\n        </div>\n        <div>\n          <label for=\"newSpecialComments\">New Special Comments:</label>\n          <textarea id=\"newSpecialComments\" v-model=\"updatedReservation.specialComments\"></textarea>\n        </div>\n        <button @click=\"updateReservation\">Update Reservation</button>\n        <button @click=\"deleteReservation\">Delete Reservation</button>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        reservation: {\n          date: '',\n          time: '',\n          numberOfPeople: '',\n          specialComments: '',\n        },\n        updatedReservation: {\n          date: '',\n          time: '',\n          numberOfPeople: '',\n          specialComments: '',\n        },\n        user: {\n          firstName: '',\n          lastName: '',\n          email: '',\n        },\n        editMode: false,\n      };\n    },\n    methods: {\n      async submitReservation() {\n        // Existing reservation submission logic\n      },\n      async fetchReservation() {\n        try {\n          const response = await fetch(`http://localhost:3000/api/reservations?firstName=${this.user.firstName}&lastName=${this.user.lastName}&email=${this.user.email}`);\n          if (response.ok) {\n            const data = await response.json();\n            if (data.length > 0) {\n              this.reservation = data[0];\n              this.updatedReservation = { ...this.reservation };\n            } else {\n              alert('No reservation found for the provided user details.');\n            }\n          } else {\n            throw new Error('Error fetching reservation');\n          }\n        } catch (error) {\n          console.error('Error fetching reservation:', error);\n        }\n      },\n      async updateReservation() {\n        try {\n          const response = await fetch(`http://localhost:3000/api/reservations/${this.reservation._id}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(this.updatedReservation),\n          });\n          if (response.ok) {\n            alert('Reservation updated successfully!');\n            this.reservation = { ...this.updatedReservation };\n          } else {\n            throw new Error('Error updating reservation');\n          }\n        } catch (error) {\n          console.error('Error updating reservation:', error);\n        }\n      },\n      async deleteReservation() {\n        try {\n          const response = await fetch(`http://localhost:3000/api/reservations/${this.reservation._id}`, {\n            method: 'DELETE',\n          });\n          if (response.ok) {\n            alert('Reservation deleted successfully!');\n            this.reservation = null;\n            this.updatedReservation = {\n              date: '',\n              time: '',\n              numberOfPeople: '',\n              specialComments: '',\n            };\n          } else {\n            throw new Error('Error deleting reservation');\n          }\n        } catch (error) {\n          console.error('Error deleting reservation:', error);\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Add your styles here */\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}